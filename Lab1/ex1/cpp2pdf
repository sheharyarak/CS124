#!/usr/bin/env bash
 
# CREATE PDF FROM SOURCE CODE
# original source https://superuser.com/a/601412/151431
# source code file names must not contain spaces
 
read -p "Please type the document title (blank to use ${PWD##*/}) : " answer
 
if [[ $answer == "" ]]; then
    title=${PWD##*/}
else
    title=$answer
fi
 
 
# if output files already exist, delete them
if [ -f ./tmp.aux ] || [ -f ./tmp.log ] || [ -f ./tmp.out ] || [ -f ./tmp.pdf ] || [ -f ./tmp.toc ] ; then
    echo "Removing old output files..."
    rm ./tmp.*
fi
 
tex_file=$(mktemp) ## Random temp file name
 
if [ $? -ne 0 ]; then
    echo "ERROR: failed to create temporary file"
    exit 1;
fi
 
# DOCUMENT HEADER
 
cat<<EOF >$tex_file   ## Print the tex file header
\batchmode
%\documentclass[titlepage,twoside]{article}
\documentclass{article} 
%\usepackage{showframe}
%\usepackage[inner=2cm,outer=4cm]{geometry}
\usepackage[screen]{geometry}
%\usepackage[inner=2.5cm,outer=2.5cm,bottom=2.5cm]{geometry}

\usepackage{graphicx} 
\usepackage{listings}
\usepackage{fancybox}
\usepackage[usenames,dvipsnames]{xcolor}  %% Allow color names
\lstdefinestyle{customasm}{
  belowcaptionskip=1\baselineskip,
  xleftmargin=\parindent,
  language=C++,   %% Change this to whatever you write in
  breaklines=true, %% Wrap long lines
  %% basicstyle=\footnotesize\ttfamily,
  basicstyle=\small\ttfamily,
  commentstyle=\itshape\color{Gray},
  stringstyle=\color{Black},
  keywordstyle=\bfseries\color{OliveGreen},
  identifierstyle=\color{blue},
  %xleftmargin=-8em,
}   
   
\lstset{
	language=C++,
	escapeinside={/*}{*/},
    showstringspaces=false 
}       
\usepackage{todonotes} 
\usepackage[colorlinks=true,linkcolor=blue]{hyperref} 
%\usepackage{auto-pst-pdf}
%\usepackage{pstricks,pst-node} 
\begin{document}

\title{$title}
\author{David Topham}
\maketitle
 
\pagenumbering{roman}
\tableofcontents
 
\newpage
\setcounter{page}{1}
\pagenumbering{arabic}

EOF
 
###############
 
# ask the user which file extensions to include
 
read -p "Provide a space separated list of extensions to include (default is 'h cpp c cxx s sml txt') : " answer
 
if [[ $answer == "" ]]; then
    answer="h cpp c cxx s sml txt"
fi
 
# replace spaces with double escaped pipe using substring replacement  http://www.tldp.org/LDP/abs/html/parameter-substitution.html
 
extensions="${answer// /\\|}"
 
###############
 
# FINDING FILES TO INCLUDE
# inline comments http://stackoverflow.com/questions/2524367/inline-comments-for-bash#2524617
# not all of the conditions below are necessary now that the regex for c++ files has been added, but they don't harm
 
filesarray=(
$(
find .                                          `# find files in the current directory` \
        -type f                                 `# must be regular files` \
        -regex ".*\.\($extensions\)"            `# only files with the chosen extensions (.h, .cpp and .qml) by default` \
        ! -regex ".*/\..*"                      `# exclude hidden directories - anything slash dot anything (Emacs regex on whole path https://www.emacswiki.org/emacs/RegularExpression)` \
        ! -name ".*"                            `# not hidden files` \
        ! -name "*~"                            `# don't include backup files` \
        ! -name 'src2pdf'                       `# not this file if it's in the current directory`
))
 
###############
 
# sort the array https://stackoverflow.com/questions/7442417/how-to-sort-an-array-in-bash#11789688
# internal field separator $IFS https://bash.cyberciti.biz/guide/$IFS
 
IFS=$'\n' filesarray=($(sort <<<"${filesarray[*]}"))
unset IFS
 
###############
 
#read -p "Re-order files to place header files in front of cpp files? (y/n) : " answer
 
#if [[ ! $answer == "n" ]] && [[ ! $answer == "N" ]] ; then
    echo "Re-ordering files..."
 
    # if this element is a .cpp file, check the next element to see if it is a matching .h file
    # if it is, swap the order of the two elements
    re="^(.*)\.cpp$"
 
    # this element is ${filesarray[$i]}, next element is ${filesarray[$i+1]}
    for (( i=0; i<=$(( ${#filesarray[@]} -1 )); i++ ))
    do
        # if the element is a .cpp file, check the next element to see if it is a matching .h file
        if [[ ${filesarray[$i]} =~ $re ]]; then
            header=${BASH_REMATCH[1]}
            header+=".h"
            if [[ ${filesarray[$i+1]} == $header ]]; then
                # replace the next element in the array with the current element
                filesarray[$i+1]=${filesarray[$i]}
                # replace the current element in the array with $header
                filesarray[$i]=$header
            fi
        fi
    done
#fi
 
###############
 
# Change ./foo/bar.src to foo/bar.src
IFS=$'\n' filesarray=($(sed 's/^\..//' <<<"${filesarray[*]}"))
unset IFS
 
###############
 
 
# read -p "Review files found? (y/n) : " answer
 
# if [[ $answer == "y" ]] || [[ $answer == "Y" ]] ; then
 
    echo "The following files will be included in the document..."
 
    for i in "${filesarray[@]}"
    do
        echo $i
    done
 
    # allow the user to abort
    read -p "Proceed? (y/n) : " answer
    if [[ $answer == "n" ]] || [[ $answer == "N" ]] ; then
        exit 0
    fi
 
# fi
 
###############
 
# create a .tex file with each section on its own page
 
echo "Creating tex file..."
 
for i in "${filesarray[@]}"
do
    
    echo "\newpage" >> $tex_file   # start each section on a new page
    echo "\section{$i}" >> $tex_file  # create a section for each source file
    echo "\lstinputlisting[style=customasm]{$i}" >>$tex_file # place the contents of each file in a listing
done
 
echo "\end{document}" >> $tex_file
 
###############
 
# run pdflatex twice to produce TOC
echo "Creating pdf..."
echo
 
pdflatex $tex_file -output-directory . 
 
if [ $? -ne 0 ]; then
    echo "ERROR: pdflatex command failed on first run, refer to tmp.log for more information"
    exit 1;
fi
#pdflatex --shell-escape $tex_file -output-directory . 
pdflatex $tex_file -output-directory .
 
if [ $? -ne 0 ]; then
    echo "ERROR: pdflatex command failed on second run, refer to tmp.log for more information"
    exit 1;
fi
 
###############
 
echo "Renaming output files..."
 
mv tmp.pdf $title.pdf
 
echo "Cleaning up..."
 
rm ./tmp.*
 
echo "Done, output file is $title.pdf in this directory"
